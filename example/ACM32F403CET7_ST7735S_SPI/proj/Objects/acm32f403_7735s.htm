<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\acm32f403_7735s.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\acm32f403_7735s.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6130100: Last Updated: Thu Jan 18 12:27:54 2024
<BR><P>
<H3>Maximum Stack Usage =        200 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; asciiTest &rArr; drawAscii &rArr; lcdMonocolour &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[16]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">ADC_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[16]">ADC_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[29]">AES_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[2e]">CAN1_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[2f]">CAN2_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[11]">CLKRDY_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[2b]">DAC_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[13]">DMA_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[c]">EFC_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[f]">EXTI_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[30]">FPU_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[d]">GPIOAB_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[e]">GPIOCD_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[2d]">GPIOEF_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[3a]">HAL_GPIO_Init</a> from hal_gpio.o(.text.HAL_GPIO_Init) referenced from gpio.o(.text.lcdGpioInit)
 <LI><a href="#[3b]">HAL_GPIO_WritePin</a> from hal_gpio.o(.text.HAL_GPIO_WritePin) referenced from gpio.o(.text.lcdGpioInit)
 <LI><a href="#[2]">HardFault_Handler</a> from system_acm32f4.o(.text.HardFault_Handler) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[21]">I2C1_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[22]">I2C2_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[2c]">I2S_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[27]">LPUART_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[15]">RSV_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[b]">RTC_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[23]">SPI1_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[24]">SPI2_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[28]">SPI3_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[32]">SPI4_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[10]">SRAM_PARITY_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from system_acm32f4.o(.text.SysTick_Handler) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[34]">System_Core_Config</a> from system_acm32f4.o(.text.System_Core_Config) referenced from startup_acm32f4.o(.text)
 <LI><a href="#[1d]">TIM14_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[1e]">TIM15_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[1f]">TIM16_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[20]">TIM17_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[17]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[18]">TIM1_CC_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[19]">TIM2_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[1a]">TIM3_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[1b]">TIM6_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[1c]">TIM7_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[25]">UART1_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[26]">UART2_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[14]">UART3_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[12]">UART4_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[2a]">USB_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[a]">WDT_IRQHandler</a> from startup_acm32f4.o(.text) referenced from startup_acm32f4.o(RESET)
 <LI><a href="#[35]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_acm32f4.o(.text)
 <LI><a href="#[36]">drawChinese</a> from display.o(.text.drawChinese) referenced from main.o(.text.chineseTest)
 <LI><a href="#[39]">drawLine</a> from display.o(.text.drawLine) referenced from main.o(.text.drawTest)
 <LI><a href="#[3e]">fputc</a> from hal_uart.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[38]">lcdBlock</a> from st7735s.o(.text.lcdBlock) referenced from display.o(.text.drawRectangle)
 <LI><a href="#[3d]">lcdByte</a> from st7735s.o(.text.lcdByte) referenced from st7735s.o(.text.lcdInit)
 <LI><a href="#[3c]">lcdCmd</a> from st7735s.o(.text.lcdCmd) referenced from st7735s.o(.text.lcdInit)
 <LI><a href="#[37]">lcdPixel</a> from st7735s.o(.text.lcdPixel) referenced from display.o(.text.drawCircle)
 <LI><a href="#[33]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[35]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(.text)
</UL>
<P><STRONG><a name="[8f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[3f]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[90]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[91]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[92]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[93]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[94]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>CLKRDY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EFC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>EXTI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOAB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOCD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>GPIOEF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>LPUART_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>RSV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SRAM_PARITY_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_acm32f4.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpsTest
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[46]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpsTest
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[8e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[96]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[42]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[97]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[45]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[47]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[48]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4c]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8b]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[40]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[99]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[9a]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>GPIO_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gpio.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = GPIO_Init &rArr; ledGpioInit &rArr; HAL_GPIO_Init &rArr; System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledGpioInit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdGpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>HAL_EFlash_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_eflash.o(.text.HAL_EFlash_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_EFlash_Init &rArr; HAL_EFlash_Init_Para
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EFlash_Init_Para
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Clock_Init
</UL>

<P><STRONG><a name="[53]"></a>HAL_EFlash_Init_Para</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, hal_eflash_ex.o(.text.HAL_EFlash_Init_Para))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_EFlash_Init_Para
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Verify_Chip
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EFlash_Init
</UL>

<P><STRONG><a name="[3a]"></a>HAL_GPIO_Init</STRONG> (Thumb, 744 bytes, Stack size 48 bytes, hal_gpio.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_GPIO_Init &rArr; System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Module_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledGpioInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text.lcdGpioInit)
</UL>
<P><STRONG><a name="[3b]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, hal_gpio.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdReset
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMonocolour
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdData
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdCmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdByte
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdBlock
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledOn
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledOff
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledGpioInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text.lcdGpioInit)
</UL>
<P><STRONG><a name="[56]"></a>HAL_SPI_Init</STRONG> (Thumb, 240 bytes, Stack size 16 bytes, hal_spi.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[57]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, spi.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Module_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[87]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, hal_spi.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxlcd
</UL>

<P><STRONG><a name="[64]"></a>HAL_UART_Enable_Disable_FIFO</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, hal_uart.o(.text.HAL_UART_Enable_Disable_FIFO))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[58]"></a>HAL_UART_Init</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, hal_uart.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Get_Clk_Source
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Get_APBClock
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[59]"></a>HAL_UART_MspInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, uart.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Module_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[54]"></a>HAL_Verify_Chip</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, hal_eflash_ex.o(.text.HAL_Verify_Chip))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EFlash_Init_Para
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_acm32f4.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>SPI_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, spi.o(.text.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = SPI_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init &rArr; System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[5d]"></a>Set_Pll_Div</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, system_acm32f4.o(.text.Set_Pll_Div))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Set_Pll_Div &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Clock_Init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_acm32f4.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>System_Clock_Init</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, system_acm32f4.o(.text.System_Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = System_Clock_Init &rArr; Set_Pll_Div &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pll_Div
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_EFlash_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[34]"></a>System_Core_Config</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_acm32f4.o(.text.System_Core_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = System_Core_Config &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_acm32f4.o(.text)
</UL>
<P><STRONG><a name="[5e]"></a>System_Delay</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, system_acm32f4.o(.text.System_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = System_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Module_Enable
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Core_Config
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Pll_Div
</UL>

<P><STRONG><a name="[68]"></a>System_Delay_MS</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, system_acm32f4.o(.text.System_Delay_MS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = System_Delay_MS
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageTest
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpsTest
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTest
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chineseTest
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asciiTest
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdReset
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTwinkle
</UL>

<P><STRONG><a name="[61]"></a>System_EnableIAccelerate</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, system_accelerate.o(.text.System_EnableIAccelerate))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[5b]"></a>System_Get_APBClock</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_acm32f4.o(.text.System_Get_APBClock))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[5a]"></a>System_Get_Clk_Source</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, system_acm32f4.o(.text.System_Get_Clk_Source))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[60]"></a>System_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, system_acm32f4.o(.text.System_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = System_Init &rArr; System_Clock_Init &rArr; Set_Pll_Div &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_SysTick_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_EnableIAccelerate
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Clock_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[55]"></a>System_Module_Enable</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, system_acm32f4.o(.text.System_Module_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>

<P><STRONG><a name="[62]"></a>System_SysTick_Init</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, system_acm32f4.o(.text.System_SysTick_Init))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
</UL>

<P><STRONG><a name="[63]"></a>UART_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, uart.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init &rArr; System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Enable_Disable_FIFO
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>asciiTest</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, main.o(.text.asciiTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = asciiTest &rArr; drawAscii &rArr; lcdMonocolour &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Delay_MS
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAscii
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>chineseTest</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, main.o(.text.chineseTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = chineseTest &rArr; puts
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Delay_MS
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6a]"></a>displayClear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, display.o(.text.displayClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = displayClear &rArr; lcdClear &rArr; lcdBlock &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTest
</UL>

<P><STRONG><a name="[6c]"></a>displayInit</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, display.o(.text.displayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = displayInit &rArr; lcdInit &rArr; lcdClear &rArr; lcdBlock &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdRotation
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMirror
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>drawAscii</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, display.o(.text.drawAscii))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drawAscii &rArr; lcdMonocolour &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMonocolour
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asciiTest
</UL>

<P><STRONG><a name="[36]"></a>drawChinese</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, display.o(.text.drawChinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = drawChinese &rArr; lcdMonocolour &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMonocolour
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.chineseTest)
</UL>
<P><STRONG><a name="[78]"></a>drawCircle</STRONG> (Thumb, 200 bytes, Stack size 72 bytes, display.o(.text.drawCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = drawCircle
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTest
</UL>

<P><STRONG><a name="[71]"></a>drawImage</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, display.o(.text.drawImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = drawImage &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdData
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdArea
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageTest
</UL>

<P><STRONG><a name="[39]"></a>drawLine</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, display.o(.text.drawLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = drawLine &rArr; lcdLine &rArr; lcdBlock &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdLine
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.drawTest)
</UL>
<P><STRONG><a name="[76]"></a>drawRectangle</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, display.o(.text.drawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = drawRectangle
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTest
</UL>

<P><STRONG><a name="[75]"></a>drawTest</STRONG> (Thumb, 240 bytes, Stack size 32 bytes, main.o(.text.drawTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = drawTest &rArr; fillCircle &rArr; lcdBlock &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Delay_MS
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillRectangle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillCircle
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawRectangle
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawCircle
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayClear
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[79]"></a>fillCircle</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, display.o(.text.fillCircle))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = fillCircle &rArr; lcdBlock &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTest
</UL>

<P><STRONG><a name="[77]"></a>fillRectangle</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, display.o(.text.fillRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fillRectangle &rArr; lcdBlock &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTest
</UL>

<P><STRONG><a name="[7a]"></a>fpsTest</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, main.o(.text.fpsTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = fpsTest &rArr; lcdClear &rArr; lcdBlock &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Delay_MS
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdClear
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>fputc</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hal_uart.o(.text.fputc))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[7c]"></a>imageTest</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, main.o(.text.imageTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = imageTest &rArr; drawImage &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Delay_MS
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawImage
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>lcdArea</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, st7735s.o(.text.lcdArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdWord
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdCheckParam
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawImage
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPosition
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMonocolour
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdBlock
</UL>

<P><STRONG><a name="[38]"></a>lcdBlock</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, st7735s.o(.text.lcdBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lcdBlock &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdCmd
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdCheckParam
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdArea
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxlcd
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillRectangle
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillCircle
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdLine
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.text.drawRectangle)
</UL>
<P><STRONG><a name="[3d]"></a>lcdByte</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, st7735s.o(.text.lcdByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcdByte &rArr; writeBus &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBus
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdRotation
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMirror
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735s.o(.text.lcdInit)
</UL>
<P><STRONG><a name="[7d]"></a>lcdCheckParam</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, st7735s.o(.text.lcdCheckParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lcdCheckParam
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdBlock
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdArea
</UL>

<P><STRONG><a name="[6b]"></a>lcdClear</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, st7735s.o(.text.lcdClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lcdClear &rArr; lcdBlock &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpsTest
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayClear
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
</UL>

<P><STRONG><a name="[3c]"></a>lcdCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, st7735s.o(.text.lcdCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcdCmd &rArr; writeBus &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBus
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawImage
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdRotation
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPixel
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMonocolour
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMirror
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdBlock
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdArea
</UL>
<BR>[Address Reference Count : 1]<UL><LI> st7735s.o(.text.lcdInit)
</UL>
<P><STRONG><a name="[73]"></a>lcdData</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, st7735s.o(.text.lcdData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxlcd
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawImage
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdWord
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdHalfWord
</UL>

<P><STRONG><a name="[50]"></a>lcdGpioInit</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, gpio.o(.text.lcdGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lcdGpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[81]"></a>lcdHalfWord</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, st7735s.o(.text.lcdHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcdHalfWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdData
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPixel
</UL>

<P><STRONG><a name="[6d]"></a>lcdInit</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, st7735s.o(.text.lcdInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lcdInit &rArr; lcdClear &rArr; lcdBlock &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Delay_MS
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdRotation
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdReset
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMirror
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdClear
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayInit
</UL>

<P><STRONG><a name="[74]"></a>lcdLine</STRONG> (Thumb, 240 bytes, Stack size 64 bytes, st7735s.o(.text.lcdLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lcdLine &rArr; lcdBlock &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawLine
</UL>

<P><STRONG><a name="[6f]"></a>lcdMirror</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, st7735s.o(.text.lcdMirror))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcdMirror &rArr; lcdCmd &rArr; writeBus &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdCmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
</UL>

<P><STRONG><a name="[70]"></a>lcdMonocolour</STRONG> (Thumb, 308 bytes, Stack size 56 bytes, st7735s.o(.text.lcdMonocolour))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = lcdMonocolour &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdArea
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxlcd
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawChinese
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawAscii
</UL>

<P><STRONG><a name="[37]"></a>lcdPixel</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, st7735s.o(.text.lcdPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lcdPixel &rArr; lcdPosition &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPosition
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdHalfWord
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> display.o(.text.drawCircle)
</UL>
<P><STRONG><a name="[83]"></a>lcdPosition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, st7735s.o(.text.lcdPosition))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lcdPosition &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdArea
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdPixel
</UL>

<P><STRONG><a name="[82]"></a>lcdReset</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, st7735s.o(.text.lcdReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lcdReset &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Delay_MS
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
</UL>

<P><STRONG><a name="[6e]"></a>lcdRotation</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, st7735s.o(.text.lcdRotation))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcdRotation &rArr; lcdCmd &rArr; writeBus &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdCmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdInit
</UL>

<P><STRONG><a name="[7e]"></a>lcdWord</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, st7735s.o(.text.lcdWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdData
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdArea
</UL>

<P><STRONG><a name="[51]"></a>ledGpioInit</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, gpio.o(.text.ledGpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ledGpioInit &rArr; HAL_GPIO_Init &rArr; System_Module_Enable &rArr; System_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[84]"></a>ledOff</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(.text.ledOff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ledOff &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTwinkle
</UL>

<P><STRONG><a name="[85]"></a>ledOn</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, led.o(.text.ledOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ledOn &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTwinkle
</UL>

<P><STRONG><a name="[86]"></a>ledTwinkle</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, led.o(.text.ledTwinkle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ledTwinkle &rArr; ledOn &rArr; HAL_GPIO_WritePin
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Delay_MS
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledOn
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledOff
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = main &rArr; asciiTest &rArr; drawAscii &rArr; lcdMonocolour &rArr; lcdArea &rArr; lcdWord &rArr; lcdData &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;System_Init
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageTest
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpsTest
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTest
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chineseTest
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asciiTest
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;displayInit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ledTwinkle
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[7f]"></a>spiTxlcd</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, spi.o(.text.spiTxlcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeBus
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdMonocolour
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdData
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdBlock
</UL>

<P><STRONG><a name="[80]"></a>writeBus</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, st7735s.o(.text.writeBus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = writeBus &rArr; spiTxlcd &rArr; HAL_SPI_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiTxlcd
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdCmd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcdByte
</UL>

<P><STRONG><a name="[88]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[9b]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[7b]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageTest
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpsTest
</UL>

<P><STRONG><a name="[9c]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9d]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[9e]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[9f]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[a0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[65]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = puts
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;imageTest
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fpsTest
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTest
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chineseTest
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asciiTest
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[8a]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[89]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[8d]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8c]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
